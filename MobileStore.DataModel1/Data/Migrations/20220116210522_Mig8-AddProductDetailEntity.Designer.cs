// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MobileStore.DataModelLayer1.Data;

namespace MobileStore.DataModelLayer1.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220116210522_Mig8-AddProductDetailEntity")]
    partial class Mig8AddProductDetailEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MobileStore.DataModelLayer.Models.InvoiceEntity", b =>
                {
                    b.Property<int>("Invoice_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Invoice_BuyTotalSum")
                        .HasColumnType("bigint");

                    b.Property<string>("Invoice_BuyerUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Invoice_DateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("Invoice_Discount")
                        .HasColumnType("bigint");

                    b.Property<int>("Invoice_FinalAmount")
                        .HasColumnType("int");

                    b.Property<int>("Invoice_InvoiceNo")
                        .HasColumnType("int");

                    b.Property<bool>("Invoice_PaymentStatus")
                        .HasColumnType("bit");

                    b.Property<int>("Invoice_ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Invoice_ProductNum")
                        .HasColumnType("int");

                    b.Property<string>("Invoice_RefrenceId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<long>("Invoice_TaxAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("Invoice_TransationId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<long>("Invoice_TransportCost")
                        .HasColumnType("bigint");

                    b.HasKey("Invoice_Id");

                    b.HasIndex("Invoice_BuyerUserId");

                    b.HasIndex("Invoice_ProductId");

                    b.ToTable("Tbl_Invoice");
                });

            modelBuilder.Entity("MobileStore.DataModelLayer.Models.ProductEntity", b =>
                {
                    b.Property<int>("Product_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Product_Bazdid")
                        .HasColumnType("int");

                    b.Property<string>("Product_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("Product_IsAccept")
                        .HasColumnType("bit");

                    b.Property<double>("Product_Mablagh")
                        .HasColumnType("float");

                    b.Property<int>("Product_MenuId")
                        .HasColumnType("int");

                    b.Property<int>("Product_Mojodi")
                        .HasColumnType("int");

                    b.Property<string>("Product_NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Product_ProName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<double>("Product_Takhfif")
                        .HasColumnType("float");

                    b.Property<string>("Product_TozihKamel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Product_TozihKotah")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("Product_ZamanSabt")
                        .HasColumnType("datetime2");

                    b.HasKey("Product_Id");

                    b.ToTable("Tbl_Product");
                });

            modelBuilder.Entity("MobileStore.DataModelLayer.Models.ProductGalleryEntity", b =>
                {
                    b.Property<int>("ProductGallery_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ProductGallery_Default")
                        .HasColumnType("bit");

                    b.Property<string>("ProductGallery_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductGallery_ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductGallery_Id");

                    b.HasIndex("ProductGallery_ProductId");

                    b.ToTable("Tbl_ProductGallery");
                });

            modelBuilder.Entity("MobileStore.DataModelLayer.Models.SettingsEntity", b =>
                {
                    b.Property<int>("Settings_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Settings_About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Settings_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Settings_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Settings_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Settings_Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Settings_MetaKeyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Settings_SiteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Settings_Tel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Settings_Id");

                    b.ToTable("Tbl_Settings");
                });

            modelBuilder.Entity("MobileStore.DataModelLayer1.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MobileStore.DataModelLayer1.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MobileStore.DataModelLayer1.Models.CategoriesEntity", b =>
                {
                    b.Property<int>("CategoriesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriesParentId")
                        .HasColumnType("int");

                    b.Property<string>("CategoriesTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoriesID");

                    b.ToTable("Tbl_Categories");
                });

            modelBuilder.Entity("MobileStore.DataModelLayer1.Models.MenuEntity", b =>
                {
                    b.Property<int>("MenuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CateId")
                        .HasColumnType("int");

                    b.Property<string>("MenuTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MenuID");

                    b.HasIndex("CateId");

                    b.ToTable("Tbl_Menu");
                });

            modelBuilder.Entity("MobileStore.DataModelLayer1.Models.NewsEntity", b =>
                {
                    b.Property<int>("News_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("News_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("News_Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("News_IsAccept")
                        .HasColumnType("bit");

                    b.Property<DateTime>("News_RegistrationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("News_Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("News_Id");

                    b.ToTable("Tbl_News");
                });

            modelBuilder.Entity("MobileStore.DataModelLayer1.Models.ProductDetailEntity", b =>
                {
                    b.Property<int>("ProductDetail_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductDetail_AttName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDetail_AttValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductDetail_ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductDetail_Id");

                    b.HasIndex("ProductDetail_ProductId");

                    b.ToTable("Tbl_ProductDetail");
                });

            modelBuilder.Entity("MobileStore.DataModelLayer1.Models.SliderEntity", b =>
                {
                    b.Property<int>("SliderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SliderImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SliderIsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SliderLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SliderPrority")
                        .HasColumnType("int");

                    b.Property<string>("SliderTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SliderID");

                    b.ToTable("Tbl_Slider");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MobileStore.DataModelLayer1.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MobileStore.DataModelLayer1.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MobileStore.DataModelLayer1.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MobileStore.DataModelLayer1.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MobileStore.DataModelLayer1.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MobileStore.DataModelLayer1.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MobileStore.DataModelLayer.Models.InvoiceEntity", b =>
                {
                    b.HasOne("MobileStore.DataModelLayer1.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Invoice")
                        .HasForeignKey("Invoice_BuyerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MobileStore.DataModelLayer.Models.ProductEntity", "Product")
                        .WithMany("Invoice")
                        .HasForeignKey("Invoice_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MobileStore.DataModelLayer.Models.ProductGalleryEntity", b =>
                {
                    b.HasOne("MobileStore.DataModelLayer.Models.ProductEntity", "ProductEntity")
                        .WithMany("ProductGallery")
                        .HasForeignKey("ProductGallery_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MobileStore.DataModelLayer1.Models.MenuEntity", b =>
                {
                    b.HasOne("MobileStore.DataModelLayer1.Models.CategoriesEntity", "Categories")
                        .WithMany("Menu")
                        .HasForeignKey("CateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MobileStore.DataModelLayer1.Models.ProductDetailEntity", b =>
                {
                    b.HasOne("MobileStore.DataModelLayer.Models.ProductEntity", "Product")
                        .WithMany("ProductDetail")
                        .HasForeignKey("ProductDetail_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
